my_vector = c(1,2,3,4,6)
my_vector
my_vector * 2
my_vector * c(2,3,45,6)
my_vector * c(2,3,4,5,6)
my_vector + c(2,3,4,5,6)
my_vector[1]
my_vector[3]
my_vector[4]
my_vector[6]
my_vector[5]
is.data.frame(startup_data)
exit()
is.data.frame(startup_data)
install.packages("KernSmooth")
library(KernSmooth)
library(datasets)
data(iris)
?iris
split(iris, $species)
iris
split(iris, Species)
split(iris, f=Species)
split(iris, f=$Species)
?split
factor(species)
split(iris, iris$Species)
iris_split <- split(iris, iris$Species)
ColMeans(iris_split)
colMeans
colMeans(iris_Split)
colMeans(iris_split)
iris_split
lapply(colMeans, iris_split)
?lapply
lapply(iris_split, colMeans)
sapply(iris_split, colMeans)
iris_split[1]
sapply(iris_split[2], colMeans)
sapply(iris_split, colMeans)
debug(sapply)
sapply(iris_split, colMeans)
quit
return
escape
nQ
nclear
clear
sdf
sdf
sapply(iris_split, colMeans)
Q
Q
kj
rm(list = ls())
q
Q
undebug(sapply)
iris
iris_split
colMeans(iris_split[2])
iris_split[2]
?colMeans
colMeans(iris_split[2])
iris_split[1]
iris_split[2][1]
iris_split[2][1][1]
iris_split[2][1][1][1]
iris_split[3][1][1][1]
virginica <- iris_split[3]
virginica
virginica[1]
virginica[3
[]
]
virginica[3]
virginica[2]
virginica[1]
virginica[1][1]
virginica[1][1][1]
virginica[1][1][1][1]
virginica[1][1][1][1][1]
virginica[1][1][1][1][1][1]
virginica[1][1][1][1][1][1]
virginica[1][1][1][1][1][1][2]
?type
type(virginica)
typeof(virginica)
typeof(virginica[1])
typeof(virginica[0])
virginica[0]
virginica[1]
typeof(virginica[1][1])
typeof(virginica[1][1][1])
lapply(virginica, colMeans)
iris_select[Sepal.Length]
iris_split
iris_split[Sepal.Length]
iris_split[iris_split$Sepal.Length]
iris_split[iris_split$Sepal.Length][1]
iris_split[iris_split$Sepal.Length][0]
typeof(iris_split)
typeof(iris)
typeof(iris[1])
typeof(iris[2])
typeof(iris[0])
iris[0]
typeof(iris_split[0])
typeof(iris_split[0][0])
iris_split[0]
iris_split[0][0]
iris_split[0]
iris
iris[1]
iris_split[2]
iris_split[3]
iris_split[3][1]
iris_split[3][0]
iris_split[3][1]
lapply(iris_split, function(x){ x[,1:4]})
veronica <- lapply(iris_split, function(x){ x[,1:4]})
veronica[3]
lapply(veronica, colMeans)
apply(iris, 2, mean)
apply(iris, 1, mean)
rowMeans(iris[1:4])
rowMeans(iris[,1:4])
apply(iris[, 1:4], 2, mean)
data(mtcars)
?mtcars
tapply(mtcars$cyl, mtcars$mpg, mean)
with(mtcars, tapply(mpg, cyl, mean))
sapply(mtcars, cyl, mean)
15.1 - 26.66364
B = matrix(
+   c(2, 4, 3, 1, 5, 7),
+   nrow=3,
+   ncol=2)
B = matrix(
+   c(2, 4, 3, 1, 5, 7),
nrow=3,
ncol=2)
solve(B)
B = matrix(
+   c(2, 4, 3, 1, 5, 7,6,7,8),
nrow=3,
ncol=3)
B
solve(B)
source("cachematrix.R")
getwd
getwd()
dir()
setwd("Documents//Coursera//datasciencecoursera/RProgramming/ProgrammingAssignment2/")
source("cachematrix.R")
makeCacheMatrix(B)
new_matrix <- makeCacheMatrix(B)
cacheSolve(new_matrix)
cacheSolve(new_matrix)
swirl()
swirl()
load(swirl)
library(swirl)
swirl()
rm(list=ls())
1:20
pi:10
15:1
?`:`
seq(1,20)
seq(0,10, by = .5)
seq(5,10,length = 30)
my_seq <- seq(5,10,length = 30)
length(my_seq)
1:length(my_seq)
seq(along.with = my_seq)
seq_along(my_seq)
rep(0, times = 40)
rep(c(0,1,2), times = 10)
rep(c(0,1,2), each = 10)
num_vect = c(.5, 44, -10, 6)
num_vect <- c(.5, 44, -10, 6)
num_vect <- c(.5, 55, -10, 6)
tf <- num_vect <1
tf
num_vect >= 6
"My name is"
my_char <- c("My", "name, "is"()
my_char <- c("My", "name, "is")
my_char <- c("My", "name", "is")
my_char
paste(my_char, collapse = " ")
my_name <- c(my_char, "Max")
my_nae
my_name
paste(my_name, collapse = " ")
paste("Hello", "world!", sep = " ")
paste(1:3, c("X", "Y", "Z"), sep = " ")
paste(1:3, c("X", "Y", "Z"), sep = "")
paste(LETTERS, 1:4, sep = "-")
set.seed(1)
rpois(5, 2)
swirl
swirl()
x <- c(44, NA, 5, NA)
x * 3
y <- rnorm(1000)
z <- rep(NA, 1000)
my_data <- sample(c(y,z), 100)
my_na <- is.na(my_data)
my_na
my_data == NA
sum(my_na)
my_data
0/0
Inf - Inf
x
x[1:10]
x[is.na(x)]
y <- x[!is.na(x)]
y
y[y > 0]
x[x > 0]
x[!is.na(x) & x > 0]
x[c(3,5,7)]
x[0]
x[300000]
x[3000]
x[c(-2,-10)]
x[-c(2,10)]
vect <- c(foo = 11, bar = 2, norf = NA)
vect
names(vect)
vect2 <- c(11,2,NA)
names(vect2) <- c("foo", "bar", "norf")
identical(vect, vect2)
vect["bar"]
vect[c("foo", "bar")]
